<?xml version="1.0"?>
<launch>

  <!--Robot description and related parameter files -->
  <arg name="robot_description_file" default="$(find robotiq_3f_gripper_visualization)/launch/fixed_robotiq_gripper_upload.launch" doc="Launch file which populates the 'robot_description' parameter."/>

  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find robotiq_3f_gripper_articulated_gazebo)/config/robotiq_3f_controller.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="robotiq_joint_state_controller robotiq_3f_controller" doc="Controllers that are activated by default."/>

  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" default="500" doc="Rate at which robot_state_publisher should publish transforms."/>

  <!-- Gazebo parameters -->
  <arg name="debug" default="false" doc="Activates the debug mode."/>
  <arg name="enable_ros_network" default="true"/>
  <arg name="gazebo_model_name" default="gripper" doc="The name to give to the model in Gazebo (after spawning it)."/>
  <arg name="gazebo_world" default="worlds/grippertest.world" doc="The '.world' file to load in Gazebo."/>
  <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server."/>
  <arg name="gui_required" default="false"/>
  <arg name="output" default="screen"/>
  <arg name="paused" default="true" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded."/>
  <arg name="physics" default="ode" doc="ODE is the default Physics-engine, Bullet and Dartsim are also implemented."/>
  <arg name="pub_clock_frequency" default="100"/>
  <arg name="recording" default="false"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo."/>
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere."/>
  <arg name="server_required" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="verbose" default="false"/>

  <!-- Initial Position of the robot in meters and radians -->
  <arg name="spawn_x" default="0.0" doc="x in meters."/>
  <arg name="spawn_y" default="0.0" doc="y in meters."/>
  <arg name="spawn_z" default="0.1" doc="z (height) in meters. NOTE: lower values will cause the robot to collide with the ground plane."/>
  <arg name="spawn_R" default="0.0" doc="roll in radians."/>
  <arg name="spawn_P" default="0.0" doc="pitch in radians."/>
  <arg name="spawn_Y" default="0.0" doc="yaw in radians."/>
  <!-- Robotiq-3f: Initial joint positions in radians -->
  <arg name="spawn_f1_j1" default="0.0"/>
  <arg name="spawn_f1_j2" default="0.0"/>
  <arg name="spawn_f1_j3" default="0.0"/>
  <arg name="spawn_f2_j1" default="0.0"/>
  <arg name="spawn_f2_j2" default="0.0"/>
  <arg name="spawn_f2_j3" default="0.0"/>
  <arg name="spawn_mid_j1" default="0.0"/>
  <arg name="spawn_mid_j2" default="0.0"/>
  <arg name="spawn_mid_j3" default="0.0"/>
  <arg name="spawn_palm_f1" default="0.0"/>
  <arg name="spawn_palm_f2" default="0.0"/>

  <!-- Load urdf on the parameter server -->
  <include file="$(arg robot_description_file)">
  </include>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
  </node>

  <!-- Start the 'driver' (ie: Gazebo in this case) and the controller for 3f-Gripper -->
  <include file="$(dirname)/inc/3f_control.launch.xml">
    <arg name="controller_config_file" value="$(arg controller_config_file)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="enable_ros_network" value="$(arg enable_ros_network)"/>
    <arg name="gazebo_world" value="$(arg gazebo_world)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="gui_required" value="$(arg gui_required)"/>
    <arg name="output" value="$(arg output)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="physics" value="$(arg physics)"/>
    <arg name="pub_clock_frequency" value="$(arg pub_clock_frequency)"/>
    <arg name="recording" value="$(arg recording)"/>
    <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    <arg name="server_required" value="$(arg server_required)"/>
    <arg name="spawn_x" value="$(arg spawn_x)"/>
    <arg name="spawn_y" value="$(arg spawn_y)"/>
    <arg name="spawn_z" value="$(arg spawn_z)"/>
    <arg name="spawn_R" value="$(arg spawn_R)"/>
    <arg name="spawn_P" value="$(arg spawn_P)"/>
    <arg name="spawn_Y" value="$(arg spawn_Y)"/>
    <arg name="spawn_f1_j1" value="$(arg spawn_f1_j1)"/>
    <arg name="spawn_f1_j2" value="$(arg spawn_f1_j2)"/>
    <arg name="spawn_f1_j3" value="$(arg spawn_f1_j3)"/>
    <arg name="spawn_f2_j1" value="$(arg spawn_f2_j1)"/>
    <arg name="spawn_f2_j2" value="$(arg spawn_f2_j2)"/>
    <arg name="spawn_f2_j3" value="$(arg spawn_f2_j3)"/>
    <arg name="spawn_mid_j1" value="$(arg spawn_mid_j1)"/>
    <arg name="spawn_mid_j2" value="$(arg spawn_mid_j2)"/>
    <arg name="spawn_mid_j3" value="$(arg spawn_mid_j3)"/>
    <arg name="spawn_palm_f1" value="$(arg spawn_palm_f1)"/>
    <arg name="spawn_palm_f2" value="$(arg spawn_palm_f2)"/>
    <arg name="use_clock_frequency" value="$(arg use_clock_frequency)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
</launch>
